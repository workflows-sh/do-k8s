version: "1"
commands:
  - name: setup:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/setup.ts
    description: "Setup Kubernetes infrastructure on DigitalOcean"
    env:
      static:
        - STACK_TYPE=do-k8s
        - STACK_ENTROPY=01012022
        - TFC_ORG=cto-ai
      secrets:
        - DO_TOKEN
        - DO_SPACES_ACCESS_KEY_ID
        - DO_SPACES_SECRET_ACCESS_KEY
        - TFC_TOKEN
      configs:
        - DEV_DO_K8S_STATE
        - STG_DO_K8S_STATE
        - PRD_DO_K8S_STATE
        - DO_DEV_K8S_CONFIG
        - DO_STG_K8S_CONFIG
        - DO_PRD_K8S_CONFIG
        - DO_DEV_REDIS_CONFIG
        - DO_DEV_POSTGRES_CONFIG
        - DO_DEV_MYSQL_CONFIG
  - name: istio:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/istio.ts
    description: "Setup Istio over Kubernetes"
    env:
      static:
        - STACK_TYPE=do-k8s
        - STACK_ENTROPY=01012022
        - TFC_ORG=cto-ai
        - STACK_ORG=cto-ai
      secrets:
        - DO_TOKEN
        - DO_SPACES_ACCESS_KEY_ID
        - DO_SPACES_SECRET_ACCESS_KEY
        - TFC_TOKEN
      configs:
        - DEV_DO_K8S_STATE
        - STG_DO_K8S_STATE
        - PRD_DO_K8S_STATE
        - DO_DEV_K8S_CONFIG
        - DO_STG_K8S_CONFIG
        - DO_PRD_K8S_CONFIG
        - DO_DEV_REDIS_CONFIG
        - DO_DEV_POSTGRES_CONFIG
        - DO_DEV_MYSQL_CONFIG
  - name: deploy:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/deploy.ts
    description: "Deploy a service to Kubernetes infrastructure on DigitalOcean"
    env:
      static:
        - STACK_TYPE=do-k8s
        - STACK_ENTROPY=01012022
        - TFC_ORG=cto-ai
      secrets:
        - DO_TOKEN
        - DO_SPACES_ACCESS_KEY_ID
        - DO_SPACES_SECRET_ACCESS_KEY
        - TFC_TOKEN
      configs:
        - DEV_DO_K8S_STATE
        - STG_DO_K8S_STATE
        - PRD_DO_K8S_STATE
        - DO_DEV_SERVICES
        - DO_STG_SERVICES
        - DO_PRD_SERVICES
  - name: destroy:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/destroy.ts
    description: "Destroy resources in your Kubernetes infrastructure on DigitalOcean"
    env:
      static:
        - STACK_TYPE=do-k8s
        - STACK_ENTROPY=01012022
        - TFC_ORG=cto-ai
      secrets:
        - DO_TOKEN
        - DO_SPACES_ACCESS_KEY_ID
        - DO_SPACES_SECRET_ACCESS_KEY
        - TFC_TOKEN
      configs:
        - DEV_DO_K8S_STATE
        - STG_DO_K8S_STATE
        - PRD_DO_K8S_STATE
        - DO_DEV_K8S_CONFIG
        - DO_STG_K8S_CONFIG
        - DO_PRD_K8S_CONFIG
        - DO_DEV_SERVICES
        - DO_STG_SERVICES
        - DO_PRD_SERVICES
  - name: vault:0.1.0
    run: ./node_modules/.bin/ts-node /ops/src/vault.ts
    description: "manage secrets vault"
    env:
      static:
        - STACK_TYPE=do-k8s
        - STACK_ENTROPY=01012022
      secrets:
        - DO_TOKEN
      configs:
        - DEV_DO_K8S_STATE
        - STG_DO_K8S_STATE
        - PRD_DO_K8S_STATE
    help:
      usage: ops run vault <sub-cmd> <--key> <--value>
      arguments: 
        init: 'init the environments vault'
        create: 'set a key in the enviroment vault'
        list: 'list keys in the environment vault'
        remove: ' remove a specific key in the environment vault'
        destroy: 'destroy the environment vault'
pipelines:
  - name: sample-app-pipeline:0.1.0
    description: build a release for deployment
    env:
      static:
        - DEBIAN_FRONTEND=noninteractive
        - STACK_TYPE=do-k8s
        - ORG=cto-ai
        - REPO=sample-app
        - REF=main
      secrets:
        - GITHUB_TOKEN
        - DO_TOKEN
    # events:
      # - "github:workflows-sh/sample-app:pull_request.opened"
    jobs:
      - name: sample-app-build-job
        description: example build step
        packages:
          - git
          - unzip
          - python
          - wget
          - tar
      #  # bind:
      #     # - /path/to/host/repo:/ops/application
        steps:
          - wget https://github.com/digitalocean/doctl/releases/download/v1.68.0/doctl-1.68.0-linux-amd64.tar.gz
          - tar xf ./doctl-1.68.0-linux-amd64.tar.gz
          - ./doctl version
          # - git clone https://$GITHUB_TOKEN:x-oauth-basic@github.com/$ORG/$REPO
          # - cd $REPO && ls -asl
          # - git fetch && git checkout $REF
          - cd application && ls -asl
          - ../doctl auth init -t $DO_TOKEN
          - ../doctl registry login
          - docker build -f Dockerfile -t registry.digitalocean.com/$ORG/$REPO-$STACK_TYPE:$REF .
          - docker push registry.digitalocean.com/$ORG/$REPO-$STACK_TYPE:$REF

